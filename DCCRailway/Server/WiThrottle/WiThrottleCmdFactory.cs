using DCCRailway.Server.WiThrottle.Commands;

namespace DCCRailway.Server.WiThrottle;

public class WiThrottleCmdFactory {
    private readonly WiThrottleConnectionEntry _connectionEntry;
    private readonly string                    _terminator = "\x0A";

    public WiThrottleCmdFactory(WiThrottleConnectionEntry connectionEntry, string? terminator = null) {
        _connectionEntry = connectionEntry;
        if (terminator != null) _terminator = terminator;
    }

    /// <summary>
    ///     Simply, given an input string, this will return a Command Object that
    ///     needs to be managed and processed based on the command provided.
    /// </summary>
    /// <param name="command">A string of data, in raw BYTE form that has been received</param>
    /// <returns></returns>
    public IThrottleCmd Interpret(CommandType type, string command) {
        if (!string.IsNullOrEmpty(command) && command.Length >= 1) {
            // Get rid of the terminator if it is still there
            // --------------------------------------------------------------
            command = command.TrimEnd(_terminator.ToCharArray());
            var cmdCode = command.Remove(1);
            var cmdData = command.Length > 1 ? command[1..] : "";

            // Special commands are generated by the SYSTEM
            // --------------------------------------------------------------
            return type switch {
                CommandType.Startup      => new CmdStartup(_connectionEntry, command),
                CommandType.ChangeNotify => new CmdStartup(_connectionEntry, command),
                CommandType.Alert        => new CmdStartup(_connectionEntry, command),
                CommandType.Info         => new CmdStartup(_connectionEntry, command),
                CommandType.ServerType   => new CmdStartup(_connectionEntry, command),
                CommandType.FastClock    => new CmdStartup(_connectionEntry, command),
                CommandType.Client =>

                    // What is the command? What do we need to do with it?
                    // --------------------------------------------------------------
                    cmdCode switch {
                        "T" => new CmdThrottle(_connectionEntry, cmdData),
                        "S" => new CmdThrottle(_connectionEntry, cmdData),
                        "M" => new CmdThrottle(_connectionEntry, cmdData),
                        "C" => new CmdThrottle(_connectionEntry, cmdData),
                        "D" => new CmdDirect(_connectionEntry, cmdData),
                        "*" => new CmdHeartBeat(_connectionEntry, cmdData),
                        "N" => new CmdDeviceName(_connectionEntry, cmdData),
                        "H" => new CmdDeviceID(_connectionEntry, cmdData),
                        "P" => new CmdPanelCmd(_connectionEntry, cmdData),
                        "R" => new CmdRosterCmd(_connectionEntry, cmdData),
                        "Q" => new CmdQuit(_connectionEntry, cmdData),
                        _   => new CmdUnknown(_connectionEntry, command)
                    },
                _ => new CmdUnknown(_connectionEntry, command)
            };
        }

        return new CmdUnknown(_connectionEntry, command);
    }
}

public enum CommandType {
    Client,
    Startup,
    ChangeNotify,
    FastClock,
    Alert,
    Info,
    ServerType
}