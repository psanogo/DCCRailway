/*

                                    Bincmds.txt
Below is the actual header from the binary code module
in the 12/21/2004 release of the system software. All
binary commands listed are implemented and most are
fully tested at this point. To my knowledge all notations
are correct.

Headers from each command are also included
The headers refe
r to command station internal assembly language
code that will mean nothing to your code but may still offer some '
insight proper usage of each binary command.
The file below is best viewed with a mono-spaced font
such as Courier

.PAGE
.SUBTITLE       "FILE: BIN232.ASM"
;*************************************************************************
;
;              The RS-232 port binary commands are designed to work
;              in a computer friendly mode.
;
;              Command format is:  <cmd number> <data> <data> ...
;
;              Commands range from 0x80 to 0xBF
;
;              The number of bytes in the command is determined by
;              using the lookup table "BIN_TABLE". the number returned from
;              the table is inclusive of the command number.
;
;              Commands and formats supported:
;
;
;
; CMD  FORMAT   DESCRIPTION                # OF BYTES
;                                            RETURNED
;--------------------------------------------------------------------------
; 0x80          NOP, dummy instruction           (1)     !
;--------------------------------------------------------------------------
; 0x81 xx xx yy assign loco                      (1)     !,1,2
;--------------------------------------------------------------------------
; 0x82          read clock                       (2)     <hours>
;                                                        <minutes>
;--------------------------------------------------------------------------
; 0x83          Clock stop                       (1)     !
;--------------------------------------------------------------------------
; 0x84          Clock start                      (1)     !
;--------------------------------------------------------------------------
; 0x85 xx xx    Set clock hr/min                 (1)     !,3
;--------------------------------------------------------------------------
; 0x86 xx       Set clock 12/24                  (1)     !,3
;               0=12 hr 1=24 hr
;--------------------------------------------------------------------------
; 0x87 xx       Set clock ratio                  (1)     !,3
;--------------------------------------------------------------------------
; 0x88 xx xx    Dequeue packet by loco addr      (1)     !,1,2
;--------------------------------------------------------------------------
; 0x89          Enable main trk, kill prog       (1)     !
;--------------------------------------------------------------------------
; 0x8A yy 		Return status of AIU yy			(4)
													<current hi byte>
													<current lo byte>
													<change hi byte>
;
;--------------------------------------------------------------------------
; 0x8B          Kill main trk, enable prog       (1)     !
;--------------------------------------------------------------------------
; 0x8C          Dummy instruction returns "!"    (3)     !,0x0D,0x0A
;               followed by CR/LF
;--------------------------------------------------------------------------
; 0x8D xxxx mm  Set speed mode of loco xxxx      (1)     !,1,3
;               to mode mm, 1=14, 2=28, 3=128            <speed mode, 0 to 3>
;--------------------------------------------------------------------------
; 0x8E aaaa nn <16 data bytes>                   (1)     !,4
;               Write nn bytes, start at aaaa
;               Must have 16 data bytes, pad
;               them out to 16 if necessary
;--------------------------------------------------------------------------
; 0x8F aaaa     Read 16 bytes, start at aaaa     (16)    16 bytes
;--------------------------------------------------------------------------
; 0x90 cc xx... Send 16 char message to Cab cc   (1)     !,2
;               LCD line 3.  xx = 16 ASCII char
;--------------------------------------------------------------------------
; 0x91 cc xx... Send 16 char message to Cab cc   (1)     !,2
;               LCD line 4.  xx = 16 ASCII char
;--------------------------------------------------------------------------
; 0x92 cc xx... Send 8 char message to Cab cc    (1)     !,2
;               LCD line 2 right.  xx = 8 char
;--------------------------------------------------------------------------
; 0x93 ss xx xx xx                               (1)     !
;               Queue 3 byte packet to TEMP_Q
;               Send ss times
;--------------------------------------------------------------------------
; 0x94 ss xx xx xx xx                            (1)     !
;               Queue 4 byte packet to TEMP_Q
;               Send ss times
;--------------------------------------------------------------------------
; 0x95 ss xx xx xx xx xx                         (1)     !
;               Queue 5 byte packet to TEMP_Q
;               Send ss times
;--------------------------------------------------------------------------
; 0x96 ss xx xx xx xx xx xx                      (1)     !
;               Queue 6 byte packet to TEMP_Q
;               Send ss times
;--------------------------------------------------------------------------
; 0x97 aaaa xx  Write 1 byte,to aaaa             (1)     !
;--------------------------------------------------------------------------
; 0x98 aaaa xx xx                                (1)     !
;               Write 2 bytes to aaaa
;--------------------------------------------------------------------------
; 0x99 aaaa <4 data bytes>                       (1)     !
;               Write 4 bytes to aaaa
;--------------------------------------------------------------------------
; 0x9A aaaa <8 data bytes>                       (1)     !
;               Write 8 bytes to aaaa
;--------------------------------------------------------------------------
; 0x9B yy       Return status of AIU yy          (2)     <current hi byte>
;               (short form of command 0x8A)             <current lo byte>
;--------------------------------------------------------------------------
; 0x9C xx       Execute macro number xx          (1)     !,0,3
;--------------------------------------------------------------------------
; 0x9D aaaa     Read 1 bytes at memory addr aaaa (1)     1 byte
;--------------------------------------------------------------------------
; 0x9E          Enter Programming track mode     (1)     ! = success
;                                                        3 = short circuit
;--------------------------------------------------------------------------
Page 2
<change lo byte>
                                    Bincmds.txt
; 0x9F          Exit Programming track mode      (1)     ! = success
;--------------------------------------------------------------------------
; 0xA0 aaaa xx  Program CV aa with data xx in    (1)     ! = success
;               paged mode                               0 = program track no
enabled
;--------------------------------------------------------------------------
; 0xA1 aaaa
;
;
;--------------------------------------------------------------------------
; 0xA2 aaaa nn dd  Locomotive speed, function,   (1)     !,3
;                  or consist command
;--------------------------------------------------------------------------
; ; ; ; ; ; ;
for commands 0xA0,0xA1 and 0xA6- 0xA9
Read CV aa in paged mode         (2)     !,0,3
NOTE: cv data followed ! for ok,
0xff followed by 3 for can't read
; 0xA3 xx xx
;
;
;--------------------------------------------------------------------------
; 0xA4 xx xx... Queue 4 byte packet to TRK_Q     (1)     !,1
Queue 3 byte packet to TRK_Q     (1)     !,1
(replaces any packet with same
address if it exists)
;               (replaces any packet with same
;               address if it exists)
;--------------------------------------------------------------------------
; 0xA5 xx xx... Queue 5 byte packet to TRK_Q     (1)     !,1
;               (replaces any packet with same
;               address if it exists)
;--------------------------------------------------------------------------
; 0xA6 rr xx    Program register rr with data xx (1)     ! = success
;               in register mode                         0 = program track no
enabled
;--------------------------------------------------------------------------
; 0xA7 rr
;
enabled
;
;--------------------------------------------------------------------------
; 0xA8 aaaa xx  Program CV aaaa with data xx     (1)     ! = success
Read register rr in register mode(2)     !,3
NOTE: cv data followed ! for ok,         0 = program track no
0xff followed by 3 for can't read
;               in direct mode                           0 = program track no
enabled
;--------------------------------------------------------------------------
; 0xA9 aaaa
;
enabled
;
;--------------------------------------------------------------------------
; 0xAA          Return software revision number  (3)     <data1>,<data2>,<data3>
;               FORMAT: VV.MM.mm
;--------------------------------------------------------------------------
; 0xAB          Perform a soft reset of command  (0)     Returns nothing
;               station (like cycling the power)
;--------------------------------------------------------------------------
; 0xAC          Perform a hard reset of command  (0)     Returns nothing
;               station (reset to factory defaults)
;--------------------------------------------------------------------------
;
;
;
;NOTE: a single byte of 0 will be returned of not in programming mode
Read CV aaaa in direct mode      (2)     !,3
NOTE: cv data followed ! for ok,         0 = program track no
0xff followed by 3 for can't read
Errors returned:
'0'= command not supported
'1'= loco address out of range
'2'= cab address out of range
Page 3
Bincmds.txt
;                                  '3'= data out of range
;                                  '4'= byte count out of range
;                                  '!'= command completed successfully
;
;*************************************************************************
B_TBL
;command jump table
JP       PR_BIN_OK
JP       BCMD_81
JP       BCMD_82
JP       BCMD_83
JP       BCMD_84
JP       BCMD_85
JP       BCMD_86
JP       BCMD_87
JP       BCMD_88
JP       BCMD_89
JP       BCMD_8A
JP       BCMD_8B
JP       BCMD_8C
JP       BCMD_8D
JP       BCMD_8E
JP       BCMD_8F
JP       BCMD_90
JP       BCMD_91
JP       BCMD_92
JP       BCMD_93
JP       BCMD_94
JP       BCMD_95
JP       BCMD_96
JP       BCMD_97
JP       BCMD_98
JP       BCMD_99
JP       BCMD_9A
JP       BCMD_9B
JP       BCMD_9C
JP       BCMD_9D
JP       BCMD_9E
JP       BCMD_9F
JP       BCMD_A0
JP       BCMD_A1
JP       BCMD_A2
JP       BCMD_A3
JP       BCMD_A4
JP       BCMD_A5
JP       BCMD_A6
JP       BCMD_A7
JP       BCMD_A8
JP       BCMD_A9
JP       BCMD_AA
JP       BCMD_AB
JP       BCMD_AC
JP       BERR_0
JP       BERR_0
JP       BERR_0
JP       BERR_0
JP       BERR_0
JP       BERR_0
JP       BERR_0
JP       BERR_0
JP       BERR_0
 ;0x80 128 NOP... just prints '!'
 ;0x81 129 assign loco to cab
 ;0x82 130 read clock
 ;0x83 131 Clock stop
 ;0x84 132 Clock resume (start)
 ;0x85 133 Set clock hours, minutes
 ;0x86 134 Set clock 12/24 hours
 ;0x87 135 Set clock speed (ratio)
 ;0x88 136 Dequeue by loco address
 ;0x89 137 Enable main, kill prg trk
 ;0x8A 138 Return AIU status
 ;0x8B 139 Kill main, enable prg trk
 ;0x8C 140 Return !,CR,LF
 ;0x8D 141 Set speed mode of loco
 ;0x8E 142 Write 16 bytes to RAM
 ;0x8F 143 Return 16 bytes from RAM
 ;0x90 144 Write 16 char to LCD line 3
 ;0x91 145 Write 16 char to LCD line 4
 ;0x92 146 Write 8 char to LCD line 2, right
 ;0x93 147 Queue 3 byte TEMP_Q packet
 ;0x94 148 Queue 4 byte TEMP_Q packet
 ;0x95 149 Queue 5 byte TEMP_Q packet
 ;0x96 150 Queue 6 byte TEMP_Q packet
 ;0x97 151 Write 1 byte to RAM
 ;0x98 152 Write 2 bytes to RAM
 ;0x99 153 Write 4 bytes to RAM
 ;0x9A 154 Write 8 bytes to RAM
 ;0x9B 155 Short form of CMD 0x8A
 ;0x9C 156 Execute route macro
 ;0x9D 157 Return 1 byte from RAM
 ;0x9E 158 Enter program track mode
 ;0x9F 159 Exit program track mode
 ;0xA0 160 Write a CV in  paged mode
 ;0xA1 161 Read a CV in paged mode
 ;0xA2 162 Locomotive speed/function command
 ;0xA3 163 Queue 3 byte TRK_Q packet
 ;0xA4 164 Queue 4 byte TRK_Q packet
 ;0xA5 165 Queue 5 byte TRK_Q packet
 ;0xA6 166 Write in register mode
 ;0xA7 167 Read in register mode
 ;0xA8 168 Write in direct mode
 ;0xA9 169 Read in direct mode
 ;0xAA 170 Return C/S software version
 ;0xAB 171 Command station soft reset
 ;0xAC 172 Command station hard reset
 ;0xAD 173
 ;0xAE 174
 ;0xAF 175
 ;0xB0 176
 ;0xB1 177
 ;0xB2 178
 ;0xB3 179
 ;0xB4 180
 ;0xB5
Page 4
JP       BERR_0
JP       BERR_0
JP       BERR_0
JP       BERR_0
JP       BERR_0
JP       BERR_0
JP       BERR_0
JP       BERR_0
JP       BERR_0
JP       BERR_0
JP       BERR_0
JP       BERR_0
JP       BERR_0
JP       BERR_0
Bincmds.txt
    ;0xB6
    ;0xB7
    ;0xB8
    ;0xB9
    ;0xBA
    ;0xBB
    ;0xBC
    ;0xBD
    ;0xBE
    ;0xBF
    ;0xC0 this command ALWAYS BERR_0
    ;0xC1 this command ALWAYS BERR_0
    ;0xC2 this command ALWAYS BERR_0
    ;0xC3 this command ALWAYS BERR_0
;***********************************************************************
;
;              BIN_TABLE contains the expected byte count of
;              each binary mode command
;
;***********************************************************************
BIN_TABLE
DB       1
DB       4
DB       1
DB       1
DB       1
DB       3
DB       2
DB       2
DB       3
DB       1
DB       2
DB       1
DB       1
DB       4
DB       20
DB       3
DB       18
DB       18
DB       10
DB       5
DB       6
DB       7
DB       8
DB       4
DB       5
DB       7
DB       11
DB       2
DB       2
DB       3
DB       1
DB       1
DB       4
DB       3
DB       5
DB       4
DB       5
DB       6
DB       3
DB       2
 ;0x80 NOP
 ;0x81 ASSIGN
 ;0x82 READ CLOCK
 ;0x83 STOP CLOCK
 ;0x84 START CLOCK
 ;0x85 SET CLOCK H/M
 ;0x86 SET 12/24 HOUR MODE
 ;0x87 SET CLOCK RATIO
 ;0x88 DEQUEUE TRK_Q PACKET
 ;0x89 CONNECT MAIN,DISCONNECT PROG TRK
 ;0x8A RETURN AIU STATUS, LONG FORM
 ;0x8B DISCONNECT MAIN, CONNECT PROG TRK
 ;0x8C RETURN "!",CR,LF
 ;0x8D SET SPEED MODE OF LOCO
 ;0x8E WRITE BYTES TO RAM
 ;0x8F READ 16 BYTES FROM RAM
 ;0x90 WRITE LCD LINE 3
 ;0x91 WRITE LCD LINE 4
 ;0x92 WRITE LCD LINE 2, RIGHT
 ;0x93 3 BYTE PACKET TO TEMP_Q
 ;0x94 4 BYTE PACKET TO TEMP_Q
 ;0x95 5 BYTE PACKET TO TEMP_Q
 ;0x96 6 BYTE PACKET TO TEMP_Q
 ;0x97 Write 1 byte to RAM
 ;0x98 Write 2 bytes to RAM
 ;0x99 Write 4 bytes to RAM
 ;0x9A Write 8 bytes to RAM
 ;0x9B Short form of AIU status
 ;0x9C Execute route macro
 ;0x9D read1byte from RAM
 ;0x9E Enter program track mode
 ;0x9F Exit program track mode
 ;0xA0 Write a CV in  paged mode
 ;0xA1 Read a CV in paged mode
 ;0xA2 Locomotive command
 ;0xA3 3 BYTE PACKET TO TRK_Q
 ;0xA4 4 BYTE PACKET TO TRK_Q
 ;0xA5 5 BYTE PACKET TO TRK_Q
 ;0xA6 Write in register mode
 ;0xA7 Read in register mode
Page 5
DB       4
DB       3
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
DB       1
Bincmds.txt
    ;0xA8 Write in direct mode
    ;0xA9 Read in direct mode
    ;0xAA Return C/S software version
    ;0xAB Command station soft reset
    ;0xAC Command station hard reset
    ;0xAD
    ;0xAE
    ;0xAF
    ;0xB0
    ;0xB1
    ;0xB2
    ;0xB3
    ;0xB4
    ;0xB5
    ;0xB6
    ;0xB7
    ;0xB8
    ;0xB9
    ;0xBA
    ;0xBB
    ;0xBC
    ;0xBD
    ;0xBE
    ;0xBF
    ;0xC0
    ;0xC1
    ;0xC2
    ;0xC3
;***************************************************************************
;
;              BCMD_81 assigns a loco to a cab
;              Loco address for this command is always 2 bytes. The first
;              byte is zero in the case of a short address. If the address
;              is long then bits 6,7 of first byte must be set to 1
;
;              Command Format:  0x81 xxxx cc
;                       xxxx = loco address
;                       cc   = cab number (0x01 to 0x3f)
;
;              Returns: ! = success
;                       1 = bad loco address
;                       2 = bad cab address
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_82 returns the fast clock to the RS232 port
;              in binary mode
;
;              Format:           0x82
;
;              Returns 2 bytes:  HOURS
;                                MINUTES
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_83 stops the scale time clock
;
;              Format:  0x83  Clock stop
                                       Page 6
Bincmds.txt
;
;              Returns: ! = success
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_84 starts the scale time clock
;
;              FORMAT:  0x84    Clock resume (start)
;
;              Returns: ! = success
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_85 sets the scale time clock
;
; FORMAT: ;
; Returns: ;
0x85 xx xx    Set clock hours, minutes
! = success
3 = hours or minutes data too large
;
;***************************************************************************
;***************************************************************************
;
;
;
;
;
;
;
;
;
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_87 sets the scale time clock ratio
;
;              Format:  0x87 xx       Set clock speed (ratio)
;
;              Returns:   ! = success
BCMD_86 sets the scale time 12/24 hour format
Format:  0x86 xx     Set clock 12/24 hours
              xx=0 means 12 hour clock
              xx=1 means 24 hour clock
Returns:
! = success
3 = 12/24 format not 0 or 1
;
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_88 reads loco address from BIN_BUFF, finds the
;              corresponding entry in TRK_Q and deletes the packet
;              from the TRK_Q.
;
;              The loco address for this command is always 2 bytes. The
;              first byte is zero in the case of a short address. If the
;              address is long then bits 6,7 of first byte must be set to 1
;
;              The loco address is used for comparison to see if a packet
;              should be replaced.
;
Page 7
3 = Ratio greater than 25 or zero
                                    Bincmds.txt
;              Command Format:  0x88 xxxx
;
;
;              returns:
;
;
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_89 connects main, disconnects programming track.
;
;              Command Format:  0x89
;
;              returns:         ! (always success)
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_8A returns status of Auxilary Input Unit.
;              Returns four bytes.  The first 2 bytes are a bit map
;              of the 14 AIU inputs.  The last 2 bytes are a bit map
;              of any changes since this command was last given.
;              If the cab is greater than 63 it will be "forced" to 0.
;              The first time this command is given for a cab after the
;              command station is powered up or reset the change bytes
;              will be 0x3fff.
;
;              format:  0x8A cc   (cc=cab number 0-63)
;
;              returns 4 bytes : current high byte (AIU inputs 9-14)
;                                current low byte  (AIU inputs 1-8)
;                                change high byte  1= input changed since
xxxx = 8/14 bit address
! if success
1 if bad loco address
3 if packet not found
;
;                                change low byte
;
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_8B disconnects main track and clears all packet queues
;              note: programming track is enabled.
;
;              Format:  0x8B
;
;              Returns: ! (always success)
;
**************************************************************************
;***************************************************************************
;
;              BCMD_8C prints "!",CR,LF to the RS-232 port in Binary Mode
;
;*****************************************************************************
;***************************************************************************
;
;              BCMD_8D - sets the speed mode of loco dddd
;
Page 8
last read, 0=no change
1=input changed since
last read, 0=no change
                                    Bincmds.txt
;              Command Format:  0x8D xxxx mm
;
;
;
;
;
;              returns:
;
xxxx = 8/14 bit address
 (short address 1st byte=0)
 (long address 1st byte bits 6,7 are set to 1)
mm = mode    1=14spd, 2=28spd, 3=128spd
! if success
1 if bad loco address
3 if bad speed mode, only 1,2 or 3 accepted
;
;
;***************************************************************************
;*****************************************************************************
;
;              BCMD_8E writes bytes to a command station RAM address
;              16 data bytes are always required by the command. Only
;              the specified number will be written.   You must "pad"
;              out the command with extra bytes to meet the 16 byte
;              requirement even if all are not to be written.
;
;              Command Format: "0x8E aaaa nn <16 data bytes>"
;                               aaaa= RAM address, high byte first
;                               nn  = number of bytes to actually write
;
;              Returns:         !,4
;
;*****************************************************************************
;*****************************************************************************
;
;              BCMD_8F returns 16 bytes from a RAM address
;
;              Command Format: "0x8F aaaa "
;                               aaaa= RAM address, high byte first
;
;              Returns:         16 data bytes
;
;*****************************************************************************
;***************************************************************************
;
;
;
;
;
;
;
;
;
;
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_91 sends a message LCD line 4 of a cab
;              The characters to be printed are NOT range checked.
;              They must be in the range of 0x20 to 0x5F
;
;
;              Command Format:  0x91 cc <16 ASCII characters>
;                               cc  = cab number (0-63)
;
BCMD_90 sends a message LCD line 3 of a cab
The characters to be printed are NOT range checked.
They must be in the range of 0x20 to 0x5F
Command Format:  0x90 cc <16 ASCII characters>
                 cc  = cab number (0-63)
Returns:
! for success
2 bad cab address
Page 9
                                    Bincmds.txt
;              Returns:         ! for success
;                               2 bad cab address
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_92 sends a message LCD the right hand side of
;              line 2 of a cab.
;              The characters to be printed are NOT range checked.
;              They must be in the range of 0x20 to 0x5F
;
;
;              Command Format:  0x92 cc <8 ASCII characters>
;
;
;              Returns:
;
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_93 reads a 3 byte packet to put in TEMP_Q.
;              Packet addresses are NOT verified so be careful!
;              A "send times" of zero is OK... the packet
;              will not be sent.  If "send times" of 255 is requested
;              it will be adjusted to 254, due to a system limitation.
;              The packet checksum must be included with the packet data
;
;              Command Format:  0x93 <send times> <3 packet bytes>
;
;              Returns:         ! = success
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_94 reads a 4 byte packet from BIN_BUFF to put in TEMP_Q.
;              Packet addresses are NOT verified so be careful!
;              A "send times" of zero is OK... the packet
;              will not be sent.  If "send times" of 255 is requested
;              it will be adjusted to 254, due to a system limitation.
;              The packet checksum must be included with the packet data
;
;              Command Format:  0x94 <send times> <4 packet bytes>
;
;              Returns:         ! = success
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_95 reads a 5 byte packet from BIN_BUFF to put in TEMP_Q.
;              Packet addresses are NOT verified so be careful!
;              A "send times" of zero is OK... the packet
;              will not be sent.  If "send times" of 255 is requested
;              it will be adjusted to 254, due to a system limitation.
;              The packet checksum must be included with the packet data
;
;
;              Command Format:  0x95 <send times> <5 packet bytes>
;
Page 10
cc  = cab number (0-63)
! for success
2 bad cab address
                                    Bincmds.txt
;              Returns:         ! = success
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_96 reads a 6 byte packet from BIN_BUFF to put in TEMP_Q.
;              Packet addresses are NOT verified so be careful!
;              A "send times" of zero is OK... the packet
;              will not be sent.  If "send times" of 255 is requested
;              it will be adjusted to 254, due to a system limitation.
;              The packet checksum must be included with the packet data
;
;              Command Format: 0x96 <sendtimes> <6 packet bytes>
;
;              Returns:        ! = success
;
;***************************************************************************
;*****************************************************************************
;
;              BCMD_97 writes 1 byte to a command station RAM address
;
;              Command Format:  0x97 aaaa xx
; ; ;
;              Returns:
;
;*****************************************************************************
;*****************************************************************************
;
;              BCMD_98 writes 2 bytes to a command station RAM address
;
;              Command Format:  0x98 aaaa xx xx
; ; ;
;              Returns:
;
;*****************************************************************************
;*****************************************************************************
;
;              BCMD_99 writes 4 bytes to a command station RAM address
;
;              Command Format: "0x99 aaaa <4 data bytes>"
;                               aaaa= RAM address, high byte first
;
;              Returns:         !
;
;*****************************************************************************
;*****************************************************************************
;
;              BCMD_9A writes 8 bytes to a command station RAM address
;
;              Command Format: "0x9A aaaa <8 data bytes>"
;                               aaaa= RAM address, high byte first
;
; Returns: ! ;
Page 11
aaaa= RAM address, high byte first
xx  = byte to write
!
aaaa= RAM address, high byte first
xx  = bytes to write
!
                                    Bincmds.txt
;*****************************************************************************
;***************************************************************************
;
;              BCMD_9B This is a short form of CMD 0x8A.  It returns
;              only the first 2 bytes of command 0x8A.
;              The 2 bytes are a bit map of the 14 AIU inputs.
;              If the cab is greater than 63 it will be "forced" to 0.
;
;              format:  0x9B cc   (cc=cab number 0-63)
;
;              returns 2 bytes : current high byte (AIU inputs 9-14)
;                                current low byte  (AIU inputs 1-8)
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_9C executes a previously defined macro for route control
;
;              Command Format:  0x9C xx    (xx = macro number, 0->255)
;
;              Returns:         ! = success
;
;
;***************************************************************************
;*****************************************************************************
;
;              BCMD_9D returns 1 byte from a RAM address
;
;              Command Format: "0x9D aaaa "
;                               aaaa= RAM address, high byte first
;
;              Returns:         1 data byte
;
;*****************************************************************************
;*****************************************************************************
;
;              BCMD_9E Enters Program track mode.  Power is removed
;              from mainline and applied to program track.  The queues
;              are formatted to send reset packets
;
;              Command Format: 0x9E
;
;              Returns: ! = success
;
;*****************************************************************************
;*****************************************************************************
;
;              BCMD_9F Returns from Program track mode.  Power is restored
;              to mainline and removed from program track.  The queues
;              are reinitialized for normal operation
;
;              Command Format: 0x9F
;
;              Returns: ! = success
;
;*****************************************************************************
;*****************************************************************************
                                      Page 12
0 = "empty" macro
Bincmds.txt
;
;              BCMD_A0 Writes a CV in paged mode
;
;              Command Format: 0xA0 aaaa nn
;                                   aaaa = CV address (high byte first)
; nn = cv data ;
;              Returns: ! = success
;                       0 = not in program track mode
;
;*****************************************************************************
;*****************************************************************************
;
;
;
;
;
;
;
;
;
;*****************************************************************************
;***************************************************************************
;
;              BCMD_A2 sends a speed or function packet to a locomotive.
;              First ix is set to the computer cab context page.  This is
;              done so that type c cab commands can be called.  These
;              commands are all followed by a jump to PAGE_DONE (the normal
;              exit for the cab ping handler when a command is finished).
;              PAGE_DONE assumes that a local stack has been setup and the
;              main stack pointer must be restored.  By setting up the
;              computer cab with its own context page and local stack all
;              normal cab routines can be used.
;
;              The loco address is built up in (ix+ADDR_H) and (ix+ADDR_L)
;              on the computer cab context page.
;
;              Op_1 and data_1 are saved into (ix+P_RESP1) and (ix+P_RESP2)
;              respectively.
;
;              Then C_PROCESS_LOC is called.  When PAGE_DONE returns to
;              this code a normal binary command exit is performed
;
;              Command Format:  0xA2 <addr_h> <addr_l> <op_1> <data_1>
;
;              Addr_h and Addr_l are the loco address in DCC format.
;              If a long address is in use, bits 6 and 7 of the high byte are set.
;                Ex:  Long address  3 = 0xc0 0x03
BCMD_A1 Reads a CV in paged mode
Command Format: 0xA1 aa aa  aaaa = CV address (high byte first)
Returns: CV value followed by ! for success
         0xff followed by 3 for can't read CV
         0 = not in program track mode
; ; ;
;               op_1       data_1
;
; 01 0-7f
; 02 0-7f
; 03 0-7f
; 04 0-7f
; 05 0
; 06 0
; 07 0-1f
; 08 0-0f
Short address 3 = 0x00 0x03
               Operation description
Reverse 28 speed command
Forward 28 speed command
Forward 128 speed command
Reverse 128 speed command
Estop reverse command
Estop forward command
Function group 1 (same format as FG1 DCC packet
Function group 2 (same format as FG2 DCC packet
Page 13
                                    Bincmds.txt
                           0-0f      Function group 3 (same format as FG3 DCC packet
                           0-7f      Set reverse consist address for lead loco
                           0-7f      Set forward consist address for lead loco
                           0-7f      Set reverse consist address for rear loco
                           0-7f      Set forward consist address for rear loco
                           0-7f      Set reverse consist address for additional loco
                           0-7f      Set forward consist address for additional loco
                           0         Del loco from consist
                           0         Kill consist
                           0-9       Change momentum level for loco or consist
                           reserved  reserved
;              Returns:
;
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_A3 reads a 3 byte packet from BIN_BUFF and puts it in
;              TRK_Q.  TRK_Q is only for speed and direction commands to
;              a loco.  Do not send anything else as any other command
;              will replace the existing speed command for that loco.
;              TRK_Q is limited to loco addresses.
;              The loco address is used for comparison to see if a packet
;              should be replaced.
;              The packet checksum must be included with the packet data
;
;              Command Format:  0xA3 <data> <data> <data>
;
;              Returns:         ! = success
; 09
; 0a
; 0b
; 0c
; 0d
; 0e
; 0f
; 10
; 11
; 12
; 13-7f ;
! = success
1 = bad loco address
;
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_A4 reads a 4 byte packet from BIN_BUFF and puts it in
;              TRK_Q.  TRK_Q is only for speed and direction commands to
;              a loco.  Do not send anything else as any other command
;              will replace the existing speed command for that loco.
;              TRK_Q is limited to loco addresses.
;              The loco address is used for comparison to see if a packet
;              should be replaced.
;              The packet checksum must be included with the packet data
;
;              Command Format:  0xA4 <data> <data> <data> <data>
;
;              Returns:         ! = success
1 = bad loco address
;
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_A5 reads a 5 byte packet from BIN_BUFF and puts it in
;              TRK_Q.  TRK_Q is only for speed and direction commands to
;              a loco.  Do not send anything else as any other command
;              will replace the existing speed command for that loco.
;              TRK_Q is limited to loco addresses.
;              The loco address is used for comparison to see if a packet
;              should be replaced.
;              The packet checksum must be included with the packet data
                                      Page 14
1 = bad loco address
; ; ; ; ; ; ;
BCMD_AA returns 3 bytes of software revision number
Command Format:  0xAA
                     Bincmds.txt
Command Format:  0xA5 <data> <data> <data> <data> <data>
;
;
;
;
;
;
;***************************************************************************
Returns:         ! = success
                 1 = bad loco address
;*****************************************************************************
;
;              BCMD_A6 Writes a register
;
;              Command Format: 0xA8 rr xx
;
;              Returns: ! = success
;                       0 = not in program track mode
;
;*****************************************************************************
;*****************************************************************************
;
;
;
;
;
;
;
;
;
;*****************************************************************************
;*****************************************************************************
;
;              BCMD_A8 Writes a CV in direct mode
;
;              Command Format: 0xA8 aaaa xx  address aaaa, data xx
;
;              Returns: ! = success
;                       0 = not in program track mode
;
;*****************************************************************************
;*****************************************************************************
;
BCMD_A7 read a register
Command Format: 0xA7 rr    rr=register
Returns: CV data followed by ! for success
         0xff followed by 3 for can't read
0 = not in program track mode
;
;
;
;
;
;
;
;
;*****************************************************************************
;***************************************************************************
;
BCMD_A9 Reads a CV in direct mode
rr=register xx=data
Command Format: 0xA9 aa aa  aaaa = CV address (high byte first)
Returns: CV data followed by ! for success
         0xff followed by 3 for can't read CV
         0 = not in program track mode
Returns:
1st byte: version number
2nd byte: major revision number
3rd byte: minor revision number
Page 15
                                    Bincmds.txt
;***************************************************************************
;***************************************************************************
;
;              BCMD_AB Soft reset of command station.  Sets command
;              Station to power up condition.
;
;              Command Format:  0xAB
;
;              Returns:         nothing
;
;***************************************************************************
;***************************************************************************
;
;              BCMD_AC Hard reset of command station.   Clears all
;              RAM and resets command station to original factory
;              defaults.  All stored information is destroyed.
;               Note: the baud rate will be set to 9600
;
;              Command Format:  0xAC
;
;              Returns:         nothing
;
;***************************************************************************
;
Page 16
*/