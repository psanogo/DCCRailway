namespace DCCRailway.Server.WiThrottle.Commands {
	public class RecvCommandFactory {
		private readonly string _terminator = "\x0A";
		private readonly WiThrottleConnectionEntry connectionEntry;

		public RecvCommandFactory(WiThrottleConnectionEntry connectionEntry, string? terminator = null) {
			this.connectionEntry = connectionEntry;
			if (terminator != null) _terminator = terminator;
		}

		/// <summary>
		///     Simply, given an input string, this will return a Command Object that
		///     needs to be managed and processed based on the command provided.
		/// </summary>
		/// <param name="command">A string of data, in raw BYTE form that has been recieved</param>
		/// <returns></returns>
		public IThrottleCmd? Interpret(CommandType type, string command) {
			if (!string.IsNullOrEmpty(command) && command.Length >= 1) {
				// Get rid of the terminator if it is still there
				// --------------------------------------------------------------
				command = command.TrimEnd(_terminator.ToCharArray());
				var cmdCode = command.Remove(1);
				var cmdData = command.Length > 1 ? command.Substring(1) : "";

				// Special commands are generated by the SYSTEM
				// --------------------------------------------------------------
				switch (type) {
				case CommandType.Startup: return new CmdStartup(connectionEntry, command);
				case CommandType.ChangeNotify: return new CmdStartup(connectionEntry, command);
				case CommandType.Alert: return new CmdStartup(connectionEntry, command);
				case CommandType.Info: return new CmdStartup(connectionEntry, command);
				case CommandType.ServerType: return new CmdStartup(connectionEntry, command);
				case CommandType.FastClock: return new CmdStartup(connectionEntry, command);
				case CommandType.Client:

					// What is the command? What do we need to do with it?
					// --------------------------------------------------------------
					return cmdCode switch {
						"T" => new CmdThrottle(connectionEntry, cmdData),
						"S" => new CmdThrottle(connectionEntry, cmdData),
						"M" => new CmdThrottle(connectionEntry, cmdData),
						"C" => new CmdThrottle(connectionEntry, cmdData),
						"D" => new CmdDirect(connectionEntry, cmdData),
						"*" => new CmdHeartBeat(connectionEntry, cmdData),
						"N" => new CmdDeviceName(connectionEntry, cmdData),
						"H" => new CmdDeviceID(connectionEntry, cmdData),
						"P" => new CmdPanelCmd(connectionEntry, cmdData),
						"R" => new CmdRosterCmd(connectionEntry, cmdData),
						"Q" => new CmdQuit(connectionEntry, cmdData),
						_ => new CmdUnknown(connectionEntry, command)
					};
				default: return new CmdUnknown(connectionEntry, command);
				}
			}

			return new CmdUnknown(connectionEntry, command);
		}
	}

	public enum CommandType {
		Client,
		Startup,
		ChangeNotify,
		FastClock,
		Alert,
		Info,
		ServerType
	}
}